package br.com.bandtec.projeto.individual;

import java.util.concurrent.ThreadLocalRandom;

public class Projeto01 extends javax.swing.JFrame {
        
        Double minCPU= 0.0;
        Double mediaCPU= 0.0;
        Double maxCPU= 0.0;
        
        Double minDisco= 0.0;
        Double mediaDisco= 0.0;
        Double maxDisco= 0.0;
        
        Double minMemoria= 0.0;
        Double mediaMemoria= 0.0;
        Double maxMemoria= 0.0;
        
        Integer contador = 0;
        
        
    public Projeto01() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar3 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        lbTexto1 = new javax.swing.JLabel();
        prgBarraDisco = new javax.swing.JProgressBar();
        lbTexto2 = new javax.swing.JLabel();
        prgBarraMemoria = new javax.swing.JProgressBar();
        lbTexto3 = new javax.swing.JLabel();
        prgBarraCPU = new javax.swing.JProgressBar();
        btnAcao1 = new javax.swing.JButton();
        lbResultadoCPU = new javax.swing.JLabel();
        lbResultadoDisco = new javax.swing.JLabel();
        lbResultadoMemoria = new javax.swing.JLabel();
        lbMinCPU = new javax.swing.JLabel();
        lbMinDisco = new javax.swing.JLabel();
        lbMinMemoria = new javax.swing.JLabel();
        lbMediaCPU = new javax.swing.JLabel();
        lbMediaMemoria = new javax.swing.JLabel();
        lbMaxCPU = new javax.swing.JLabel();
        lbMaxDisco = new javax.swing.JLabel();
        lbMaxMemoria = new javax.swing.JLabel();
        lbMediaDisco = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTexto1.setText("CPU");

        lbTexto2.setText("Disco");

        lbTexto3.setText("Memória");

        btnAcao1.setText("Fazer leitura de dados");
        btnAcao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcao1ActionPerformed(evt);
            }
        });

        lbResultadoCPU.setText("Resultado CPU:");

        lbResultadoDisco.setText("Resultado Disco:");

        lbResultadoMemoria.setText("Resultado Memória:");

        lbMinCPU.setText("Mínimo:");

        lbMinDisco.setText("Mínimo:");

        lbMinMemoria.setText("Mínimo:");

        lbMediaCPU.setText("Média:");

        lbMediaMemoria.setText("Média:");

        lbMaxCPU.setText("Máximo:");

        lbMaxDisco.setText("Máximo:");

        lbMaxMemoria.setText("Máximo:");

        lbMediaDisco.setText("Média:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAcao1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTexto2)
                            .addComponent(lbTexto1)
                            .addComponent(lbTexto3)
                            .addComponent(prgBarraCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prgBarraDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prgBarraMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbResultadoDisco)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbResultadoMemoria)
                                    .addComponent(lbResultadoCPU)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbMinDisco)
                                            .addComponent(lbMinMemoria)
                                            .addComponent(lbMinCPU))
                                        .addGap(79, 79, 79)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbMediaCPU)
                                            .addComponent(lbMediaDisco)
                                            .addComponent(lbMediaMemoria))
                                        .addGap(76, 76, 76)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbMaxDisco)
                                            .addComponent(lbMaxCPU)
                                            .addComponent(lbMaxMemoria))))
                                .addGap(0, 143, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbTexto1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prgBarraCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbResultadoCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMinCPU)
                            .addComponent(lbMediaCPU)
                            .addComponent(lbMaxCPU))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lbTexto2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(prgBarraDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbResultadoDisco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMinDisco)
                            .addComponent(lbMediaDisco)
                            .addComponent(lbMaxDisco))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lbTexto3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(prgBarraMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(lbResultadoMemoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMinMemoria)
                            .addComponent(lbMediaMemoria)
                            .addComponent(lbMaxMemoria))))
                .addGap(26, 26, 26)
                .addComponent(btnAcao1)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcao1ActionPerformed
        Double aleatorioCpu= ThreadLocalRandom.current().nextDouble(0,3);
        Double aleatorioDisco= ThreadLocalRandom.current().nextDouble(0,250);
        Double aleatorioMemoria= ThreadLocalRandom.current().nextDouble(0,4);
        
        Double valorCpu= (aleatorioCpu * 100) / 3;
        Double valorDisco= (aleatorioDisco * 100) / 250;
        Double valormemoria= (aleatorioMemoria * 100) / 4;
        
        
        //Máximo CPU
        if (maxCPU == 0) {
            lbMaxCPU.setText(String.format("Máximo: %.2f", aleatorioCpu));
            maxCPU = aleatorioCpu;
            mediaCPU = aleatorioCpu;
        } else if (aleatorioCpu > maxCPU) {
            lbMaxCPU.setText(String.format("Máximo: %.2f", aleatorioCpu));
            maxCPU = aleatorioCpu;
            mediaCPU += aleatorioCpu;
        }
        //Mínimo CPU
        if  (minCPU == 0) {
            lbMinCPU.setText(String.format("Mínimo: %.2f", aleatorioCpu));
            minCPU = aleatorioCpu;
            mediaCPU = aleatorioCpu;
        } else if (aleatorioCpu < minCPU) {
            lbMinCPU.setText(String.format("Mínimo: %.2f", aleatorioCpu));
            minCPU = aleatorioCpu;
            mediaCPU += aleatorioCpu;
        }
        
        
        //Máximo Disco
        if (maxDisco == 0) {
            lbMaxDisco.setText(String.format("Máximo: %.2f", aleatorioDisco));
            maxDisco = aleatorioDisco;
            mediaDisco = aleatorioDisco;
        } else if (aleatorioDisco > maxDisco) {
            lbMaxDisco.setText(String.format("Máximo: %.2f", aleatorioDisco));
            maxDisco = aleatorioDisco;
            mediaDisco += aleatorioDisco;
        }
        //Mínimo Disco
        if  (minDisco == 0) {
            lbMinDisco.setText(String.format("Mínimo: %.2f", aleatorioDisco));
            minDisco = aleatorioDisco;
            mediaDisco = aleatorioDisco;
        } else if (aleatorioDisco < minDisco) {
            lbMinDisco.setText(String.format("Mínimo: %.2f", aleatorioDisco));
            minDisco = aleatorioDisco;
            mediaDisco += aleatorioDisco;
        }
        
        
        //Máximo Memória
        if (maxMemoria == 0) {
            lbMaxMemoria.setText(String.format("Máximo: %.2f", aleatorioMemoria));
            maxMemoria = aleatorioMemoria;
            mediaMemoria = aleatorioMemoria;
        } else if (aleatorioMemoria > maxMemoria) {
            lbMaxMemoria.setText(String.format("Máximo: %.2f", aleatorioMemoria));
            maxMemoria = aleatorioMemoria;
            mediaMemoria += aleatorioMemoria;
        }
        //Mínimo Memória
        if  (minMemoria == 0) {
            lbMinMemoria.setText(String.format("Mínimo: %.2f", aleatorioMemoria));
            minMemoria = aleatorioMemoria;
            mediaMemoria = aleatorioMemoria;
        } else if (aleatorioMemoria < minMemoria) {
            lbMinMemoria.setText(String.format("Mínimo: %.2f", aleatorioMemoria));
            minMemoria = aleatorioMemoria;
            mediaMemoria += aleatorioMemoria;
        }
        
        contador++;
        
        //Conta média
        Double contaMediaCPU= mediaCPU/contador;
        Double contaMediaDisco= mediaDisco/contador;
        Double contaMediaMemoria= mediaMemoria/contador;
        
        lbMediaCPU.setText(String.format("Média: %.2f", contaMediaCPU));
        lbMediaDisco.setText(String.format("Média: %.2f", contaMediaDisco));
        lbMediaMemoria.setText(String.format("Média: %.2f", contaMediaMemoria));
        
        
        //Valor em inteiro
        Integer aleatorioCpuInteiro= valorCpu.intValue();
        Integer aleatorioDiscoInteiro= valorDisco.intValue();
        Integer aleatorioMemoriaInteiro= valormemoria.intValue();
        
        prgBarraCPU.setValue(aleatorioCpuInteiro);
        prgBarraDisco.setValue(aleatorioDiscoInteiro);
        prgBarraMemoria.setValue(aleatorioMemoriaInteiro);
        
        prgBarraCPU.setStringPainted(true);
        prgBarraDisco.setStringPainted(true);
        prgBarraMemoria.setStringPainted(true);
        
        lbResultadoCPU.setText(String.format("Resultado CPU: %.2f GHz", aleatorioCpu));
        lbResultadoDisco.setText(String.format("Resultado Disco: %.2f GB", aleatorioDisco));
        lbResultadoMemoria.setText(String.format("Resultado Memória: %.2f GB", aleatorioMemoria));
        
    }//GEN-LAST:event_btnAcao1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Projeto01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Projeto01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Projeto01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Projeto01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Projeto01().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcao1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JLabel lbMaxCPU;
    private javax.swing.JLabel lbMaxDisco;
    private javax.swing.JLabel lbMaxMemoria;
    private javax.swing.JLabel lbMediaCPU;
    private javax.swing.JLabel lbMediaDisco;
    private javax.swing.JLabel lbMediaMemoria;
    private javax.swing.JLabel lbMinCPU;
    private javax.swing.JLabel lbMinDisco;
    private javax.swing.JLabel lbMinMemoria;
    private javax.swing.JLabel lbResultadoCPU;
    private javax.swing.JLabel lbResultadoDisco;
    private javax.swing.JLabel lbResultadoMemoria;
    private javax.swing.JLabel lbTexto1;
    private javax.swing.JLabel lbTexto2;
    private javax.swing.JLabel lbTexto3;
    private javax.swing.JProgressBar prgBarraCPU;
    private javax.swing.JProgressBar prgBarraDisco;
    private javax.swing.JProgressBar prgBarraMemoria;
    // End of variables declaration//GEN-END:variables
}
